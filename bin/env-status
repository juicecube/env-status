#!/usr/bin/env node

const fs = require('fs'),
  path = require('path'),
  moment = require('moment'),
  chalk = require('chalk'),
  ora = require('ora'),
  asTable = require('as-table'),
  envStatus = require('../index');

const config = envStatus.getConfig();

const spinner = ora('Loading .envstatus.js').start();

if (!config) {
  spinner.fail(`${chalk.yellow('.envstatus.js')} file is missing!`);
  process.exit();
}


const requestEnv = process.argv[2];
const envs = (config.envs || []).filter(env => {
  if (requestEnv) {
    return typeof env == 'string' && (env == requestEnv || env == 'production');
  } else {
    return typeof env == 'string';
  }
});

if (requestEnv && envs.length < 2) {
  if (!envs.length || envs[0] != requestEnv) {
    spinner.fail(`env ${chalk.yellow(requestEnv)} undefined!`);
    process.exit();
  }
}

const currentVersion = (function () {
  try {
    const pkgInfo = require(path.resolve('package.json'));

    return pkgInfo.version;
  } catch (err) {
    // do nothing
  }
})();

spinner.text = 'Loading envs data';

Promise.all(envs.map(env => envStatus.fetchEnvData(env))).then(function (envsData) {
  if (envsData.length) {
    spinner.clear();
    envsData = envsData.sort((a, b) => {
      return getEnvWeight(a.env) - getEnvWeight(b.env) + (a.date > b.date ? -1 : a.date < b.date ? 1 : 0);
    });
    const prdVersion = envsData[0].env == 'production' ? envsData[0].version : '';
    const stgIndex = prdVersion && envsData.length > 1 ? 1 : 0;
    const stgVersion = envsData[stgIndex].env == 'staging' ? envsData[stgIndex].version : '';
    envsData = envsData.map(data => {
      let status;
      if (data.err) {
        status = chalk.red(data.err);
      } else if (data.env == 'production') {
        status = '';
      } else if (envStatus.isEnvAvailableSync(data.env, data.version, stgVersion, prdVersion)) {
        status = chalk.green('Available');
      } else {
        status = chalk.yellow('Using' + (currentVersion == data.version ? ' *' : ''));
      }
      const res = {
        env: data.env,
        status: status,
        version: data.version,
        branch: data.branch,
        commit: data.commit,
        author: data.author,
        date: data.date && moment(data.date).format('MM/DD HH:mm:ss'),
        since: data.date && moment(data.date).fromNow()
      };
      return res;
    });
    console.log('');
    console.log(asTable(envsData));
    console.log('');
  } else {
    spinner.fail('No env defined');
  }
})
  .catch(err => {
    spinner.clear();
    console.error(err);
  })
  .finally(() => spinner.stop());

function getEnvWeight(env) {
  if (env == 'production') {
    return 10;
  } else if (env == 'staging') {
    return 20;
  } else {
    return 30;
  }
}
